"""
This script generates full MEA plots of all spikes and 3D PCA spike feature plots
"""


# Import Libraries
import matplotlib.pyplot as plt 
import numpy as np
import os
import math
from matplotlib.mlab import PCA as mlabPCA
from mpl_toolkits.mplot3d import Axes3D
from hsl_lib.MCS_Objects import MCS_Spike, MCS_Channel
from hsl_lib.MCS_functions import plot_mea_waveforms, scan_file_info, get_spike_feature_pca, plot_spike_feature_pca, get_MCD_files_from_current_folder



# Main Function
if __name__ == "__main__":
	
	# Scan Folder for text files generated by MC_DataTool
	files_to_analyze = get_MCD_files_from_current_folder()

	for input_file in files_to_analyze:

		# Input
		print("Opening " + input_file)

		channel_numbers, num_spikes = scan_file_info(input_file)

		print("Reading " + str(num_spikes) + " spikes")

		all_spikes = parse_spikes_from_file(input_file)

		print("Generating channel information")
		all_channels = []
		channel_spikes = []
		for this_channel_number in channel_numbers:
			for this_spike in all_spikes:
				if this_spike.channel == this_channel_number:
					channel_spikes.append(this_spike)
			if len(channel_spikes) > 0:
				new_channel = make_channel(this_channel_number, channel_spikes)
				all_channels.append(new_channel)
			channel_spikes = []

		print("Generating full-MEA waveform plots")
		plotMEAWaveforms(all_channels, input_file)

		print("Generating spike feature PCA plots")
		for channel in all_channels:
			if len(channel.channel_spikes) > 3:
				pca_plot_filename = input_file.split('.')[0] + '_pca_' + str(channel.channel_number)
				spike_feature_pca = get_spike_feature_pca(channel)
				plot_spike_feature_pca(spike_feature_pca, channel.channel_number, pca_plot_filename)


		

	print('Done!')
